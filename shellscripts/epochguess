#!/usr/bin/env python3

import sys
import contextlib
from datetime import datetime
from typing import List

import click


def guess_epochs(line: str, after: int, only_first: bool, use_token: str = " ") -> str:
    # first guess epoch seconds, then epoch milliseconds
    converted: List[str] = []
    has_converted = False
    for token in line.split(use_token):
        # only meant to convert the first token we found, and we've already done that
        if only_first and has_converted:
            converted.append(token)
            continue
        # looks like a epoch timestamp
        if token.isdigit() or token.isdecimal():
            try:
                from_secs = datetime.fromtimestamp(float(token))
                if from_secs.year < after:
                    raise ValueError("doesnt meet after constraint")
                converted.append(str(from_secs))
                has_converted = True
                continue
            except ValueError:
                try:
                    from_ms = datetime.fromtimestamp(float(token) / 1000)
                    if from_ms.year < after:
                        raise ValueError("doesnt meet after constraint")
                    converted.append(str(from_ms))
                    has_converted = True
                    continue
                except ValueError:
                    pass
        # if we didn't already 'continue', add the token to the list
        converted.append(token)
    return " ".join(converted)


@click.command()
@click.option(
    "-a",
    "--after",
    type=int,
    default=2000,
    help="Timestamp should be after this year, ignore any others",
)
@click.option(
    "--first/--not-first",
    is_flag=True,
    default=True,
    help="Only convert the first date found per line",
)
@click.option(
    "-d",
    "--delimiter",
    default=" ",
    help="Delimiter to split by when attemping to find possible matches",
)
def main(after: int, first: bool, delimiter: str):
    """
    \b
    read anything from STDIN
    convert any epoch timestamps that looks like a datetime to a date,
    convert them to local-readable timestamps

    \b
    $ printf "%d this is some text" "$(date +"%s")"
    1619933459 this is some text
    $ printf "%d this is some text" "$(date +"%s")" | epochguess
    2021-05-01 22:31:03 this is some text
    """
    for line in iter(sys.stdin.readline, ""):
        print(guess_epochs(line.strip(), after, first, delimiter))


if __name__ == "__main__":
    with contextlib.suppress(KeyboardInterrupt):
        main()
